plugins {
  id 'java'
  id 'org.springframework.boot' version '3.3.0'
  id 'io.spring.dependency-management' version '1.1.5'
  id 'org.graalvm.buildtools.native' version '0.10.2'
  id 'org.cyclonedx.bom' version '1.8.2'
  id 'io.spring.javaformat' version '0.0.41'
  id "io.spring.nohttp" version "0.0.11"
  id 'pl.allegro.tech.build.axion-release' version '1.18.0'
  id 'maven-publish'
  id 'java-library'
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'io.spring.javaformat'


gradle.startParameter.excludedTaskNames += [ "checkFormatAot", "checkFormatAotTest" ]

group = 'org.springframework.samples'
version = scmVersion.version

java {
  sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
  mavenCentral()
  mavenLocal()
}

publishing {
  publications {
      mavenJava(MavenPublication) {
        from components.java
        groupId = 'com.example'
        artifactId = 'myCustomLib'
        version = '1.0.0'
    }   
  }

  repositories {
    maven {
      name = 'nexus'
      url = uri('http://localhost:8081/repository/maven-local/')
allowInsecureProtocol = true
      credentials {
        username = 'admin'
        password = 'admin'
      }
    }
  }
}

task localpublish {
  dependsOn publish
  description "publish to a local nexus repository instance"
}

ext.webjarsFontawesomeVersion = "4.7.0"
ext.webjarsBootstrapVersion = "5.3.3"

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'javax.cache:cache-api'
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
  runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
  runtimeOnly "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
  runtimeOnly "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"
  runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
  runtimeOnly 'com.h2database:h2'
  runtimeOnly 'com.mysql:mysql-connector-j'
  runtimeOnly 'org.postgresql:postgresql'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.springframework.boot:spring-boot-docker-compose'
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.testcontainers:mysql'
  checkstyle 'io.spring.javaformat:spring-javaformat-checkstyle:0.0.41'
  checkstyle 'com.puppycrawl.tools:checkstyle:10.16.0'
  testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  implementation 'org.apiguardian:apiguardian-api:1.1.2'
}

tasks.named('test') {
  useJUnitPlatform()
}
tasks.register('custom'){
 println("changed...")
}

tasks.named('custom') {dependsOn('build')
  doLast {
        def testResultsDir = file("${buildDir}/reports/tests/test")
        println "Test results directory: ${testResultsDir.absolutePath}"
        
        if (testResultsDir.exists()) {
            def testReportFile = new File(testResultsDir, 'index.html')
            println "Test report file: ${testReportFile.absolutePath}"
            
            if (testReportFile.exists()) {
                println "Opening test report: ${testReportFile.absolutePath}"
                def url = testReportFile.toURI().toURL().toString()
                ["open", url].execute()
            } else {
                println "Test report not found at: ${testReportFile.absolutePath}"
            }
        } else {
            println "Test results directory not found: ${testResultsDir.absolutePath}"
        }
  }
    
}
checkstyle {
  configDirectory = project.file('src/checkstyle')
  configFile = file('src/checkstyle/checkstyle.xml')
}

checkstyleNohttp {
  configDirectory = project.file('src/checkstyle')
  configFile = file('src/checkstyle/checkstyle.xml')
}
tasks.named("formatMain").configure { dependsOn("checkstyleMain") }
tasks.named("formatMain").configure { dependsOn("checkstyleNohttp") }

tasks.named("formatTest").configure { dependsOn("checkstyleTest") }
tasks.named("formatTest").configure { dependsOn("checkstyleNohttp") }

tasks.named("checkstyleMain").configure{ source = 'src/main/java' }
tasks.named("checkstyleTest").configure{ source = 'src/test/java' }
tasks.named("checkstyleNohttp").configure{ enabled = false }

checkstyle {
  ignoreFailures = true
}
checkstyleAot.enabled = false
checkstyleAotTest.enabled = false

checkFormatAot.enabled = false
checkFormatAotTest.enabled = false

formatAot.enabled = false
formatAotTest.enabled = false
